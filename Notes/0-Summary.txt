[C++ Things]
    1. Most Vexing Parse
    2. Resource Acquisition Is Initialization (RAII)
    3. Lazy Initialization: Initialization upon first use
    4. Fine-grained lock & Coarse-grained lock; Appropriate Grain Size 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[0] [Fundamentals of Multithreading]
    0. Why Multithreading? parallelism; Performance
    1. Threads and Processes as OS level concepts. Application and its parallel tasks abstracted as process and threads in OS
    2. Single-threaded and Multi-threaded applications
    3. Representation of process and threads in memory
    4. Single-core and Multi-core CPUs - nThreadsPerCore
    5. Context Switching - sameProcess, differentProcess, Saving&Restoring the execution State; Hyperthreading
    6. Concurrency Models
    7. Process Vs Threads : Multiprocessing vs Multithreading; Pros and Cons of Multithreading

[Example Program] "Implement a thread safe class for printing in a file"

[1] [Multithreading in C++ using <thread> library]
    0. Start/Create a new thread
        (a) Parameterized Constructor
        (d) Join or detach

        Other aspects:
            Plateform independent multithreaded code to implement multithreading applications. (posix threads for unix)
            Start execution of a thread
            Diagrams
            Main thread owns resources
            Joining the thread 
            Detaching the thread
            Must be joined or detached at the time of destruction
            A child can be joined or detached only once. joinable()
            threadId; this_thread:getId(); anotherThread.Id(); this_thread::sleep_for(1s); 
                using namespace std::literals::chrono::literals
            Infinite Loop running as fast as it can
            Ensuring the thread joining or detaching before the destruction; 2 approaches
            Callables for the thread object constructor; Functor -- most_vexing_parse
            Passing arguments of callables to the thread object 
                (a) Pass by value 
                (b) Pass by reference - std::ref() or address 
                (c) std::move [std::threads cannot be copied but only moved]
            std::thread::hardware_concurrency(); Oversubscription

    1. Thread safety and Challenges
        (a) Race Conditions: 
            1. mutex, lock_gaurd, unique_lock (locking granularity)
            2. std::once_flag object and std::call_once() method [Optimization]
            3. condition_variable + unique_lock wrapper over mutex

            Ensuring thread safety against race conditions(3)

        (b) Deadlocks: std::lock()
            Situations leading to deadlocks
            Preventing deadlocks(4)
            
    2. Copy and Move
        mutex, lock_guard, unique_lock


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////