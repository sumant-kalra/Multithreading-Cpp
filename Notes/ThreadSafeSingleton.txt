[Making a thread safe lazy initialized singleton]

Note:
There can not be a common solution to implementation of thread safe singleton as thread safety also depends on the interface.
Let's try to implement thread safety for a get() method with lazy initialization.

Terminology - 
    Lazy Initialized Singleton: static object is created inside the get() function
    Thread Safety: Protecting the shared resource against dataraces and deadlocks.





Solution:
    0. Thread safety can not be ensured until the implemented interface is correctly implemented.
    1. Lets
    
    1. Implement a lazy initialized singleton with the shared object created on heap.
    2. Use mutex with lock guard to protect the shared object creation inside get() method.
        If the threads are not synchronized for creation of the objects then each object may end up creating objects.
    3. Locking and unlocking mutex everytime a thread calls the get() method causes a performance overhead as the object needs to be created
        only once by any of the thread, there is no need to 
        