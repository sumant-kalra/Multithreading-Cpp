                                    Thread Safe Singleton (against object creation and deletion)
                                ===================================================================== 

* Needed only when Lazy Initialized

The singleton's get() method is thread-safe against object creation if the object is not lazy initialized. 
In eager loading, the static object of the class is created at the beginning of the program itself. Hence, It is not possible for any
other thread to create the object again.

Object creation in data segment:
- Eager Loading : Thread safe against object creation
- Lazy Loading  : Use mutex lock to protect the get() method. Multiple threads can create multiple static objects if the access 
                  to get() method is not synchronized. However, this technique is inefficient because the mutex needs to be locked 
                  everytime get() is called by any thread, even though the mutex lock and unlock was required only once during the 
                  object creation. Locking and unlocking mutex is redundant once the object is created.

Object creation in heap memory: [New - Delete] : Creation and Deletion both must be made thread safe
- Eager loading : Thread safe against object creation. 
                  [Do not create interface to delete the object since the object is created at the beginning of the program, it should
                  last till the end of the program. If it is implemented and used, then other threads wont be able to use the singleton
                  because there is no way to create the object again.]
- Lazy Loading  : Use mutex lock to protect the get() method. Lock the mutex only if the object is not created already, to remove the
                  redundant mutex locks after object creation.
                  [Create an interface to delete the object and make it thread safe. The interface is required here because the 
                  object is lazy initialized, developer can delete the object if it is not required anymore. The object will be 
                  re-created in the next call to get()]


                            
                    "Synchronize the object creation and deletion in a singleton" -- Needed only if lazy initialized
                    =================================================================================================

[Making a thread safe lazy initialized singleton]

Note:
There can not be a common solution to implementation of thread safe singleton as thread safety also depends on the interface.
Let's try to implement thread safety for the get() method of singleton with lazy initialization.
Mind that synchronizing threads for get() method does not ensures thread safety for the complete interface.

Terminology:
    Lazy Initialized Singleton: static object is created inside the get() function
    Thread Safety: Protecting the shared resource against dataraces and deadlocks.

Problem Statement:
    "Make the get() method of lazy initialized singleton with the instance on heap thread safe"

Solution:
    0. Thread safety for the get() method must be ensured as in multithreading environment it might result multiple objects creation.
        Method 1: Lock the mutex at the entrance of the get() method.
                    Limitation: Results in performance overhead as the threads needs to be synchronized only once during the object
                                creation but the mutex is locked and unlocked everytime get() method is called, which is redundant.
        Method 2: Avoid lazy initialization. Create the object at the class creation itself. Then there is no need to synchronize the
                object creation because it is created at the start of the program itself.
                    Limitation: Inefficient as it is possible that developer might never use it. Lazy initialization is better.
        Method 3: Use std::call_once from <mutex> to ensure that object creation code is executed only once.
                    Limitation: Does not work if the instance is deleted once by any thread.
        Method 4: Use nullcheck before locking the mutex. That is if the object is already created then there is no need to lock the 
                mutex. If it is not created yet, the mutex should be locked and object be created.
                    Limitation: NONE
    
    1. Similarly the deleteInstance() method should be protected with the mutex

