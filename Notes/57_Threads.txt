-------------------------------------------------------------------------------------------------------------------------------
[1] Fundamental concepts of processes and threads
-------------------------------------------------------------------------------------------------------------------------------
    A. Application and its parallel tasks abstracted as process and threads in OS
    B. Single-threaded and Multi-threaded applications
    C. Representation of process and threads in memory
    ---------------------------------------------------------------------------------------------------------------------------

    [A] 
    [Application and its parallel tasks abstracted as process and threads in OS] 

    [Application Level]                                 ~~~~~~~~~~~~~       [OS level]
    1. An instance of application in execution          abstracted as       A Process in OS
    2. Parallel tasks in the application                abstracted as       Threads of the process in OS

    Processes and threads are OS level concepts.

    "A process represents an instance of application in execution"
    More than one instance of the application can be running at the same time in the OS, 
    then each instance will be abstracted as a process in OS.

    "A thread represents a fundamental unit of execution."
    The application when programmed, can be in a way that it can have multiple tasks or units of execution that run in parallel.
    These multiple tasks or units of execution are spawned as threads of the process in the operating system. The multiple threads 
    of a process can run in parallel if the underlying hardware allows.
    
    [B]
    [Single-threaded or Multi-threaded applications]
    An application when programmed, can be coded either to be a single threaded or multithreaded application. 
    1. The single threaded applications create a single thread (the main thread) per instance of execution (process) in the OS.
    2. Multithreaded applications create multiple threads (main thread and the child threads) per instance of execution (process) 
       in the OS. The main thread owns all the resources of the process.

    [C]
    [Representation of process and threads in memory]
    1. Each process has its own :
        (a)Kernel (b)Stack (c)Heap (d)Data (e)Text sections and PCB: Process control block (Program Counter + CPU registers)
    2. Each thread has its own:
        (a) Stack and PCB: Process control block (Program Counter + CPU registers)
        while they share Kernel, Heap, Data and Text sections with the other threads of the process.

-------------------------------------------------------------------------------------------------------------------------------
[2] CPU architecture and Concurrency
-------------------------------------------------------------------------------------------------------------------------------
    A. Single-core and Multi-core CPUs
    B. Context Switching - Threads of the same process or Threads of different processes
    C. Concurrency Models
    
    [A]
    [Single-core and Multi-core CPUs]
    At any instant, a single computational unit (core) can run only one thread at a time.
    The multiple threads of a process can run in parallel if there are more than one core per CPU. In the modern CPU architecture,
    each CPU has more than cores. Such CPUs are called multi-core CPUs, which are capable of running multiple threads with core
    executing a single thread at a time.
    
    [B]
    [Context Switching]
    Consider the case, [Simplified]
    when the number of threads spawned by a process are more than the number of cores in the CPU. In this 
    scenario, a core switches between threads after a fix amount of execution time. The current execution state (Stack + PCB) 
    of the thread, are stored and the execution state of the thread to be run is restored. This is called a context switching.

    Consider the case, [Actual]
    there are a number of multithreaded applications running on 4-core CPU, and since each core can run only
    a single thread at a time then a core will switch between threads and the threads may belong to the same process or different 
    processes. If the threads belong to different processes then the context switching adds a huge overhead. Since the execution
    state of a process contains (a)Kernel (b)Stack (c)Heap (d)Data (e)Text sections and PCB, storing and restoring the it becomes
    a heavy operation. 
    
    [C]
    Concurrency models:
        Concurrency: Performing multiple tasks at a time.
        1. Multi-tasking:
            Context switching of threads on a core belonging to same or different processes.     
        2. Multi-threading:
            Multiple core running multiple threads of a process in parallel.
        3. Hyper-threading
        4. Multi-processing:
            A program split into multiple processes running on a distributed memory system in parallel. Multiple processes
            communicate with each other through interprocess communications channels like files, pipes and message queues.
            The final result of the application run is produced by combining the results of all the processes. Note that different
            instances of the same application are run, so they spawn multiple processes. Generally, each process try to solve the 
            same problem but for different domains. The original domain is split into sub-domains, which are then distributed among
            the processes for solution.
    [D]
    Hyperthreading:
    In the modern CPU architecture, each physical core can act as two logical units of computation. When a core executes a thread,
    some parts of the core remain idle, so this idle part is used to execute the other thread effectively executing more than one
    thread at a time. This idea is called Hyperthreading. The physical difference between the hyperthreaded cores and any other core,
    is the presence of some extra hardware junk (CPU registers). Hyperthreading increases the throughput but does not double it,
    because it is just using the idle parts of the core which can be (20-30%) or more.

-------------------------------------------------------------------------------------------------------------------------------
[3] Multithreading in C++
-------------------------------------------------------------------------------------------------------------------------------
    A. Process Vs Threads
        I. Multiprocessings
        II. Multithreading

        I. Multiprocessing:
            Each process has a single thread running.
            Processes communicate to each other via interprocess communication channels like files, pipes and message queues.
        
        II. Multithreading
            Each process has more than one thread running.
            The threads communicate to each other via shared memory.
        
        Important points regarding the multithreading:
        Pros:
        1. Fast to start: 
            Threads are faster to start than the processes. 
            Operating system has to allocate resources to start a process.
        2. Low Overhead: 
            Threads are easier to manage than the processes.
            Operating system has to provide a lot of protection to avoid the interference between two processes.
        3. Fast Communication: 
            The communication between the threads via shared memory is faster than the interprocess communication between the processes.
        
        - Threads are considered lightweight processes because they are faster to start and have low maintenance overhead.
        - Threads provide better performance than the multiprocessing applications because of the faster communication between them.
        
        Cons:
        1. Difficult to implement:
            There are some multithreading specific issues that must be carefully handled during the implementation.
        2. Can't run on distributed systems:
            A multithreading program can not run on a distributed memory system but a multiprocessing program can be easily distributed
            over a distributed system and run concurrency.
    
    B. Why do we need multithreading?
        Two reasons -
        1. Performance gain:
            Doing multiple things at the same time increases throughput.
        2. Parallelism:
            When we want to do multiple things at the same time which are otherwise impossible with a single threaded application.
            Like in the problem below:
            ‘Print to console until user presses the Enter key’
            This uses std::cin.get() to take user input, and since this method blocks the current thread of execution, 
            this check needs to be done in a separate thread while the other thread is printing to the console.
            Important Point: If a thread keeps on executing a command as fast as it can, it will result in 100% CPU consumption 
            for that thread, which is not great. So better pause/sleep the current thread for sometime after every execution.

    C. STL <thread>
        1. Creating an object of <thread> class with parameterized constructor. 
            As the thread object is created, the execution of the thread starts immediately. 
            The thread runs until it finishes off its execution.
        2. threadName.join()
            Block the current thread’s execution until the threadName finishes its execution.
        3. threadName.detach()
            Makes the thread a daemon process(background process). The thread runs in the OS independent of the application.
            It is the responsibility of the CSTDLIB to reclaim the resources in use by the thread. Sometimes, some daemon processes 
            run until the OS is shut down.
            Note that when multiple independent threads of a process run in parallel, then it becomes hard to predict which thread 
            will finish the execution first. Since both the threads share the resources, but the thread that owns the resources 
            (the main) should live long enough so that other threads can use the resources otherwise as the main thread 
            finishes execution, it submits all the resources to the OS.
        4. threadName.joinable() returns true if the thread join() or detach() has not been called on the thread yet.
            A thread can be joined or detached only once in the application.
            The thread must be join() or detach() before the thread object is destroyed otherwise an exception is thrown. 
            Refer to the next section for the reasoning.
        5. std::this_thread is the current thread of execution.
        6. std::this_thread::get_id()
        7. std::this_thread:: sleep_for(1s)
        8. using namespace std::literals::chrono::literals for ‘s’
        9. C++ thread as a thread of execution. Generally yes but not always. Refer to the next section.
            Default constructed thread object
            moved thread 
            detached thread
        10. Joining and detaching threads in C++ before the thread object destruction
            Threading is an OS specific concept.
            C++ <thread> library method calls translate to the OS level threading methods in the background.
            C++ thread as a thread of execution (OS concept) [generally but Not always]
                join()
                detach()
            Destruction a ‘joinable()’ thread [neither join() nor detach() is called yet] calls std::terminate(), 
            which throws an exception. [Reason? User to be explicit about what he wants to do.]
            Ways in which a C++ thread does not represent a thread of execution
            - Detached thread - detach()
            - std::thread object initialized by using the default constructor
            - thread that has been moved from



    
        

